-------------------------------------------------------------------------
一、如何使用Nacos作为配置中心统一管理配置
1)、引入依赖 nacos-config。
    <!--配置中心来做配置管理-->
    <dependency>
    	<groupId>com.alibaba.cloud</groupId>
    	<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
  		<version>2.2.1.RELEASE</version>
    </dependency>
2)、创建一个bootstrap.properties。
    设置服务应用名称，读取配置bootstrap文件优先级会高于其他
    spring.application.name=gulimall-coupon
    设置nacos地址
    spring.cloud.nacos.config.server-addr=127.0.0.1:8848
3)、需要给配置中心默认添加一个叫数据集（Data id）gulimall-coupon.properties。        默认规则，应用名.proerties。
4)、给应用名.proerties 添加配置
5)、动态获取配置
    @RefreshScope           动态获取并刷新配置   放在Controller类里
    @Value(${"配置项的名"})   获取到配置
    如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用nacos配置中心里的配置

二、细节
1)、命名空间：配置隔离：
    默认：public（保留空间）:默认新增的所有配置都在public空间
    1、开发，测试，生产，利用命名空间来做环境隔离
        注意：在bootstrap.properties里面配置上，需要使用哪个命名空间下的配置
        spring.cloud.nacos.config.namespace=78947065-02fa-46cb-bcf5-6b70b29820b7
    2、每一个微服务之间互相隔离，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置
2)、配置集：所有配置的集合

3)、配置集ID:
    Data ID:类似文件名

4)、配置分组
    默认所有的配置集都属于DEFAULT_GROUP  默认分组
    1111，618，1212

 项目中的使用：每个微服务创建自己的命名空间，使用配置分组区分环境，dev，test，prod

    3、同时加载多个配置集
   1)、微服务任何配置信息，任何配置文件都可以放在配置中心中
   2)、只需要在bootstrap.properties说明加载配置中心中哪些配置文件即可
   3)、@Value，@ConfigurationProperties。。。
   以前springboot任何方式从配置文件中获取值，都能使用。
   配置中心有的优先使用配置中心的